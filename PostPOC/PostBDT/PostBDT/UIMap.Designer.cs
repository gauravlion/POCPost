// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PostBDT
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// HTMLMethod - Use 'HTMLMethodParams' to pass parameters into this method.
        /// </summary>
        public void HTMLMethod()
        {
            #region Variable Declarations
            WpfMenuItem uIDebugTargetMenuItem = this.UIPostPOCMicrosoftVisuWindow.UIDebugTargetMenu.UIDebugTargetMenuItem;
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WinEdit uIItemEdit = this.UIUntitledNotepadWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'Debug Target' menu item
            Mouse.Click(uIDebugTargetMenuItem, new Point(22, 21));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(458, 480));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(126, 336));

            // Launch '%windir%\System32\notepad.exe'
            ApplicationUnderTest uIUntitledNotepadWindow = ApplicationUnderTest.Launch(this.HTMLMethodParams.UIUntitledNotepadWindowExePath, this.HTMLMethodParams.UIUntitledNotepadWindowAlternateExePath);

            // Type the following paragraph in text box 
            //'Version:1.0
            //StartHTML:00000097
            //EndHTML:00000469
            //StartFragment:00000133
            //EndFragment:00000433
            //<HTML>
            //<BODY>
            //<!--StartFragment--><TABLE><TR><TD>userId</TD><TD>id</TD><TD>title</TD><TD>body</TD></TR><TR><TD>1</TD><TD>7</TD><TD>magnam facilis autem</TD><TD>dolore placeat quibusdam ea quo vitae<br>magni quis enim qui quis quo nemo aut saepe<br>quidem repellat excepturi ut quia<br>sunt ut sequi eos ea sed quas</TD></TR></TABLE>
            //<!--EndFragment-->
            //</BODY>
            //</HTML>'
            uIItemEdit.Text = this.HTMLMethodParams.UIItemEditText;
        }
        
        /// <summary>
        /// OpenMediaMethod1 - Use 'OpenMediaMethod1Params' to pass parameters into this method.
        /// </summary>
        public void OpenMediaMethod1()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            WinEdit uINameEdit = this.UIOSDiskCWindow.UIItemWindow.UIIntroToCloudServicesListItem.UINameEdit;
            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.OpenMediaMethod1Params.SendKeys, ModifierKeys.Windows);

            // Select 'c:' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.OpenMediaMethod1Params.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.OpenMediaMethod1Params.UIOpenEditSendKeys, ModifierKeys.None);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(195, 11));

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.
        }
        
        #region Properties
        public virtual HTMLMethodParams HTMLMethodParams
        {
            get
            {
                if ((this.mHTMLMethodParams == null))
                {
                    this.mHTMLMethodParams = new HTMLMethodParams();
                }
                return this.mHTMLMethodParams;
            }
        }
        
        public virtual OpenMediaMethod1Params OpenMediaMethod1Params
        {
            get
            {
                if ((this.mOpenMediaMethod1Params == null))
                {
                    this.mOpenMediaMethod1Params = new OpenMediaMethod1Params();
                }
                return this.mOpenMediaMethod1Params;
            }
        }
        
        public UIPostPOCMicrosoftVisuWindow UIPostPOCMicrosoftVisuWindow
        {
            get
            {
                if ((this.mUIPostPOCMicrosoftVisuWindow == null))
                {
                    this.mUIPostPOCMicrosoftVisuWindow = new UIPostPOCMicrosoftVisuWindow();
                }
                return this.mUIPostPOCMicrosoftVisuWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIUntitledNotepadWindow UIUntitledNotepadWindow
        {
            get
            {
                if ((this.mUIUntitledNotepadWindow == null))
                {
                    this.mUIUntitledNotepadWindow = new UIUntitledNotepadWindow();
                }
                return this.mUIUntitledNotepadWindow;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UIOSDiskCWindow UIOSDiskCWindow
        {
            get
            {
                if ((this.mUIOSDiskCWindow == null))
                {
                    this.mUIOSDiskCWindow = new UIOSDiskCWindow();
                }
                return this.mUIOSDiskCWindow;
            }
        }
        #endregion
        
        #region Fields
        private HTMLMethodParams mHTMLMethodParams;
        
        private OpenMediaMethod1Params mOpenMediaMethod1Params;
        
        private UIPostPOCMicrosoftVisuWindow mUIPostPOCMicrosoftVisuWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIUntitledNotepadWindow mUIUntitledNotepadWindow;
        
        private UIRunWindow mUIRunWindow;
        
        private UIOSDiskCWindow mUIOSDiskCWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HTMLMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HTMLMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%windir%\System32\notepad.exe'
        /// </summary>
        public string UIUntitledNotepadWindowExePath = "C:\\Windows\\System32\\notepad.exe";
        
        /// <summary>
        /// Launch '%windir%\System32\notepad.exe'
        /// </summary>
        public string UIUntitledNotepadWindowAlternateExePath = "%windir%\\System32\\notepad.exe";
        
        /// <summary>
        /// Type the following paragraph in text box 
        ///'Version:1.0
        ///StartHTML:00000097
        ///EndHTML:00000469
        ///StartFragment:00000133
        ///EndFragment:00000433
        ///<HTML>
        ///<BODY>
        ///<!--StartFragment--><TABLE><TR><TD>userId</TD><TD>id</TD><TD>title</TD><TD>body</TD></TR><TR><TD>1</TD><TD>7</TD><TD>magnam facilis autem</TD><TD>dolore placeat quibusdam ea quo vitae<br>magni quis enim qui quis quo nemo aut saepe<br>quidem repellat excepturi ut quia<br>sunt ut sequi eos ea sed quas</TD></TR></TABLE>
        ///<!--EndFragment-->
        ///</BODY>
        ///</HTML>'
        /// </summary>
        public string UIItemEditText = @"Version:1.0
StartHTML:00000097
EndHTML:00000469
StartFragment:00000133
EndFragment:00000433
<HTML>
<BODY>
<!--StartFragment--><TABLE><TR><TD>userId</TD><TD>id</TD><TD>title</TD><TD>body</TD></TR><TR><TD>1</TD><TD>7</TD><TD>magnam facilis autem</TD><TD>dolore placeat quibusdam ea quo vitae<br>magni quis enim qui quis quo nemo aut saepe<br>quidem repellat excepturi ut quia<br>sunt ut sequi eos ea sed quas</TD></TR></TABLE>
<!--EndFragment-->
</BODY>
</HTML>";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenMediaMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenMediaMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        
        /// <summary>
        /// Select 'c:' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "c:";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPostPOCMicrosoftVisuWindow : WpfWindow
    {
        
        public UIPostPOCMicrosoftVisuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "PostPOC - Microsoft Visual Studio";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PostPOC - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WpfTitleBar UIPostPOCMicrosoftVisuTitleBar
        {
            get
            {
                if ((this.mUIPostPOCMicrosoftVisuTitleBar == null))
                {
                    this.mUIPostPOCMicrosoftVisuTitleBar = new WpfTitleBar(this);
                    #region Search Criteria
                    this.mUIPostPOCMicrosoftVisuTitleBar.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
                    this.mUIPostPOCMicrosoftVisuTitleBar.WindowTitles.Add("PostPOC - Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIPostPOCMicrosoftVisuTitleBar;
            }
        }
        
        public UIDebugTargetMenu UIDebugTargetMenu
        {
            get
            {
                if ((this.mUIDebugTargetMenu == null))
                {
                    this.mUIDebugTargetMenu = new UIDebugTargetMenu(this);
                }
                return this.mUIDebugTargetMenu;
            }
        }
        #endregion
        
        #region Fields
        private WpfTitleBar mUIPostPOCMicrosoftVisuTitleBar;
        
        private UIDebugTargetMenu mUIDebugTargetMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugTargetMenu : WpfMenu
    {
        
        public UIDebugTargetMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.Name] = "Debug Target";
            this.WindowTitles.Add("PostPOC - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIDebugTargetMenuItem
        {
            get
            {
                if ((this.mUIDebugTargetMenuItem == null))
                {
                    this.mUIDebugTargetMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIDebugTargetMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FocusTarget";
                    this.mUIDebugTargetMenuItem.WindowTitles.Add("PostPOC - Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIDebugTargetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIDebugTargetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUntitledNotepadWindow : WinWindow
    {
        
        public UIUntitledNotepadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Untitled - Notepad";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Notepad";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Untitled - Notepad");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOSDiskCWindow : WinWindow
    {
        
        public UIOSDiskCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OSDisk (C:)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("OSDisk (C:)");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("OSDisk (C:)");
            #endregion
        }
        
        #region Properties
        public UIIntroToCloudServicesListItem UIIntroToCloudServicesListItem
        {
            get
            {
                if ((this.mUIIntroToCloudServicesListItem == null))
                {
                    this.mUIIntroToCloudServicesListItem = new UIIntroToCloudServicesListItem(this);
                }
                return this.mUIIntroToCloudServicesListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIIntroToCloudServicesListItem mUIIntroToCloudServicesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIIntroToCloudServicesListItem : WinListItem
    {
        
        public UIIntroToCloudServicesListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "IntroToCloudServices_high.mp4";
            this.WindowTitles.Add("OSDisk (C:)");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("OSDisk (C:)");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
}
